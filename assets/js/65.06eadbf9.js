(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{615:function(t,a,e){"use strict";e.r(a);var s=e(17),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"react-相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-相关"}},[t._v("#")]),t._v(" React 相关")]),t._v(" "),e("h3",{attrs:{id:"_1-react-有什么特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-react-有什么特点"}},[t._v("#")]),t._v(" 1. React 有什么特点？")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("声明式设计：React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当 数据变动时 React 能高效更新并渲染合适的组件。")])]),t._v(" "),e("li",[e("p",[t._v("组件化.  构建管理自身状态的封装组件，然后对其组合以构成复杂的 UI。")])]),t._v(" "),e("li",[e("p",[t._v("高效：React 通过对 DOM 的模拟，最大限度地减少与 DOM 的交互。")])]),t._v(" "),e("li",[e("p",[t._v("灵活：无论你现在使用什么技术栈，在无需重写现有代码的前提下，通过引入 React 来开发新功能。")])])]),t._v(" "),e("p",[t._v("React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。使用 React 可以将一些 简短、独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“组件”。 由于 React 的设计思想极其独特，属于革命性创新，性能出众，代码逻辑却非常简单。所以，越来越 多的人开始关注和使用，认为它可能是将来 Web 开发的主流工具。")]),t._v(" "),e("p",[t._v("这个项目本身也越滚越大，从 最早的 UI 引擎 变成了一 整套前后端通吃 的 Web App 解决 方案。衍生的 React Native 项目，目标更是宏伟，希望用写 Web App 的方式去写 Native App。如果能够实现， 整个互联网行业都会被颠覆，因为同一组人只需要写一次 UI ，就能同时运行在服务器、浏览器和手机。")]),t._v(" "),e("h3",{attrs:{id:"_2-react-有什么优缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-react-有什么优缺点"}},[t._v("#")]),t._v(" 2. React 有什么优缺点？")]),t._v(" "),e("p",[t._v("React 优点：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("React 速度快、性能好\n它并不直接对 DOM 进行操作，引入了一个叫做虚拟 DOM 的概念，安插在 javascript 逻辑和实际的 DOM 之间，性能好")])]),t._v(" "),e("li",[e("p",[t._v("跨浏览器兼容\n虚拟 DOM 的原因帮助我们解决了跨浏览器问题，它为我们提供了标准化的 API")])]),t._v(" "),e("li",[e("p",[t._v("单向数据流 Flux 随着 React 视图库的开发而被 Facebook 概念化，是一个用于在 JavaScript 应用中创建单 向数据层的架构")])]),t._v(" "),e("li",[e("p",[t._v("React 兼容性好 使用 RequireJS 来加载和打包，而 Browserify 和 Webpack 适用于构建大型应用。")])])]),t._v(" "),e("p",[t._v("React 缺点")]),t._v(" "),e("ol",[e("li",[t._v("React 并不是一个单独完整的框架，React 是目标是 UI 组件，通常可以和其它框架组合使用，目前并不适合单独做一个完整的框架")])]),t._v(" "),e("h3",{attrs:{id:"_3-react-store-的概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-react-store-的概念"}},[t._v("#")]),t._v(" 3. React store 的概念 ？")]),t._v(" "),e("p",[t._v("React Store 就是把它们联系到一起的对象。\nStore 有以下职责：\nconst store = createStore(reducer)")]),t._v(" "),e("ol",[e("li",[t._v("维持应用的 state；")]),t._v(" "),e("li",[t._v("提供 getState() 方法获取 state；")]),t._v(" "),e("li",[t._v("提供 dispatch(action) 方法更新 state；")]),t._v(" "),e("li",[t._v("通过 subscribe(listener)注册监听器;")]),t._v(" "),e("li",[t._v("通过 subscribe(listener)返回的函数注销监听器;")])]),t._v(" "),e("h3",{attrs:{id:"_4-react-中引入-css-的方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-react-中引入-css-的方式"}},[t._v("#")]),t._v(" 4. React 中引入 css 的方式？")]),t._v(" "),e("ul",[e("li",[t._v("组件中引入 .module.css 文件\n使用.module.css 文件来为组件引入样式，这种方式也被称为 CSS 模块化。")])]),t._v(" "),e("p",[t._v("在.module.css 文件中定义的样式只能作用于当前组件内部，不会影响到其他组件或全局样式，这样可以避免样式冲突的问题。")]),t._v(" "),e("ul",[e("li",[t._v("CSS in JS")])]),t._v(" "),e("p",[t._v("CSS in JS 是一种前端开发技术，它将 CSS 样式表的定义和 JS 代码紧密结合在一起，以实现更高效、更 灵活的样式控 制。")]),t._v(" "),e("p",[t._v("在 CSS in JS 中，开发者可以使用 JS 来编写 CSS 样式， 可以在代码中通过变量或函数等方式来动态生成样式。这种方式可以避免传统 CSS 中的一些问题，如全局作用域、 选择器嵌套、命名冲突等，同时也提供了更高的可重用性和可维护性。")]),t._v(" "),e("p",[t._v("在 React 中，有多种支持 CSS in JS 的第三方库，比较常用的有 "),e("code",[t._v("styled-components")]),t._v("、"),e("code",[t._v("Emotion")]),t._v("、 "),e("code",[t._v("JSS")]),t._v(" 等。")]),t._v(" "),e("p",[t._v("这些库都提供了方便的 API 来定义和应用样式，并且可以自动管理 CSS 的引入和组件的 封装。使用 CSS in JS 可以更好地与组件化开发思想结合，提高代码的可复用性和可维护性")]),t._v(" "),e("h3",{attrs:{id:"_4-1-css-in-js-与传统-css-相比有哪些优缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-css-in-js-与传统-css-相比有哪些优缺点"}},[t._v("#")]),t._v(" 4.1 CSS-in-JS 与传统 CSS 相比有哪些优缺点？")]),t._v(" "),e("ol",[e("li",[t._v("CSS-in-JS 的优点")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("作用域隔离："),e("code",[t._v("CSS-in-JS")]),t._v(" 能让样式具备局部作用域，每个组件的样式都被封装起来，不会影响到其他组件。这避免了传统 "),e("code",[t._v("CSS")]),t._v(" 中常见的全局命名冲突问题，使代码更易于维护。")])]),t._v(" "),e("li",[e("p",[t._v("动态样式：借助 JavaScript 的动态特性，CSS-in-JS 可以依据组件的状态、props 或者其他动态数据来实时修改样式，实现更灵活的交互效果。")])])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" React"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" useState "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" styled "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'styled-components'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" StyledButton "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" styled"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("button"),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n  background-color: ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" props"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isActive "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'blue'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'gray'")]),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v(";\n  color: white;\n")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("DynamicButton")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("isActive"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" setIsActive"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("StyledButton isActive"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("isActive"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" onClick"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setIsActive")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("isActive"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n      Click me\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("StyledButton"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[t._v("代码复用：可以把样式定义成 JavaScript 函数或者对象，方便在多个组件间复用。")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("传统 CSS 的优点")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("性能优化：传统 CSS 可以通过文件压缩、合并以及浏览器缓存等方式进行优化，加载速度较快。在大型项目中，经过优化的 CSS 文件能显著提升页面性能。")])]),t._v(" "),e("li",[e("p",[t._v("社区资源丰富：传统 CSS 有庞大的社区支持，存在大量的 CSS 框架（如 Bootstrap、Tailwind CSS）和工具（如 Sass、Less），可以提高开发效率。")])]),t._v(" "),e("li",[e("p",[t._v("浏览器兼容性好：所有浏览器都原生支持 CSS，无需额外的编译或者运行时环境，因此在兼容性方面表现出色。")])])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[e("code",[t._v("CSS-in-JS")]),t._v(" 的缺点")])]),t._v(" "),e("ul",[e("li",[t._v("学习成本高："),e("code",[t._v("CSS-in-JS")]),t._v(" 需要开发者同时掌握 JavaScript 和 CSS 的知识，还得了解特定库的 API 和使用方法，增加了学习成本。")]),t._v(" "),e("li",[t._v("性能开销："),e("code",[t._v("CSS-in-JS")]),t._v(" 通常在运行时动态生成和注入 CSS 样式，这会带来一定的性能开销，尤其是在大型项目或者频繁更新样式的场景下。")]),t._v(" "),e("li",[t._v("代码可维护性挑战：当样式逻辑复杂时，"),e("code",[t._v("CSS-in-JS")]),t._v(" 代码可能会变得冗长和难以维护，尤其是在处理复杂的选择器和嵌套样式时。")])]),t._v(" "),e("h3",{attrs:{id:"_5-react-中的-key-有什么作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-react-中的-key-有什么作用"}},[t._v("#")]),t._v(" 5. React 中的 key 有什么作用？")]),t._v(" "),e("p",[t._v("在 React 中， key 是用来 给每个组件的元素（Element）做一 个唯一的标识。")]),t._v(" "),e("p",[t._v("当 React 更新组件的时候，它会对比新旧两个组件的 key 是否一致，如果一致，则说明是同一个组件，直接更新它的内容即可。\n如 果 不 一 致， 则 说 明 是 不 同的 组 件 ， 需 要先 删 除 旧 组 件 ，再 新 建 一 个 新的 组 件 并 插 入 到 DOM 树中。")]),t._v(" "),e("p",[t._v("因 此 ， key 的 作 用 是 帮 助 React 快 速 判 断 出 哪 些 元 素 发 生 了 变 化 ， 从 而 提 高 性 能 ， 避 免 不 必 要 的 DOM 操作。同时，key 也可以用来保证数组渲染时每个元素的稳定性，避免出现类似于数组元素位置发生变化但是内容没变的情况")]),t._v(" "),e("h3",{attrs:{id:"_6-常用的-react-hooks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-常用的-react-hooks"}},[t._v("#")]),t._v(" 6. 常用的 React Hooks ？")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("useState(): 允许在函数组件中使用状态。使用 useState() 声明一个状态变量，并使用它来存储组件 的状态。每次更改状态时，组件将重新渲染。")])]),t._v(" "),e("li",[e("p",[t._v("useEffect():用于处理副作用 。副作用 指在 React 组件之 外进行的 操作，例如从服务 器获取数据 ，处 理 DOM 元素等。使用 useEffect() hook，您可以执行此类操作，而无需在类组件中编写生命周期方法。")])]),t._v(" "),e("li",[e("p",[t._v("useContext(): 允许您在 React 中使用上下文。上下文是一种在组件树中传递数据的方法，可以避免 通过 Props 一层层传递数据。使用 useContext() hook，您可以访问整个应用程序中定义的上下文对象。")])]),t._v(" "),e("li",[e("p",[t._v("useReducer(): 是 useState() hook 的替代品 ， 用于管理更复杂的状态 。它使用 Reducer 函数来管理组件状态，Reducer 函数接收当前状态和要进行的操作，然后返回新状态。详细使用方式见此文章。")])]),t._v(" "),e("li",[e("p",[t._v("useCallback(): 用于避免在每次渲染时重新创建回调函数。当您需要将回调函数传递给子组件时，这 非常有用，因为它可以避免子组件不必要地重新渲染。useMemo(): 用于缓存计算结果，以避免在每次渲染时重新计算。这非常有用，特别是当计算成本很 高时。")])]),t._v(" "),e("li",[e("p",[t._v("useRef(): 用于创建对 DOM 元素的引用。它还可以用于存储组件之间共享的变量，这些变量不会在组件重新渲染时发生更改")])])]),t._v(" "),e("h3",{attrs:{id:"_7-react-和-vue-js-的相似性和差异性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-react-和-vue-js-的相似性和差异性"}},[t._v("#")]),t._v(" 7. React 和 vue.js 的相似性和差异性 ？")]),t._v(" "),e("p",[t._v("相似性如下")]),t._v(" "),e("ol",[e("li",[t._v("都是用于创建 UI 的 JavaScript 库。")]),t._v(" "),e("li",[t._v("都是快速和轻量级的代码库（这里指 React 核心库）。")]),t._v(" "),e("li",[t._v("都有基于组件的架构。")]),t._v(" "),e("li",[t._v("都使用虚拟 DOM。")]),t._v(" "),e("li",[t._v("都可以放在单独的 HTML 文件中，或者放在 Webpack 设置的一个更复杂的模块中。")]),t._v(" "),e("li",[t._v("都有独立但常用的路由器和状态管理库。")])]),t._v(" "),e("p",[t._v("它 们 最大 的 区 别在 于 Vue. js 通 常 使用 HTML 模 板 文件 ， 而 React 完 全 使用 JavaScript 创 建 虚 拟 DOM。 Vue. js 还具有对于“可变状态”的“ reactivity”的重新渲染的自动化检测系统")]),t._v(" "),e("h3",{attrs:{id:"_8-react-hook-的使用限制有哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-react-hook-的使用限制有哪些"}},[t._v("#")]),t._v(" 8. React Hook 的使用限制有哪些？")]),t._v(" "),e("p",[t._v("React Hooks 的限制主要有两条：")]),t._v(" "),e("p",[t._v("不要在循环、条件或嵌套函数中调用 Hook； 在 React 的函数组件中调用 Hook。")]),t._v(" "),e("p",[t._v("那为什么会有这样的限制呢 ？")]),t._v(" "),e("p",[t._v("Hooks 的设计初衷是为了改进 React 组件 的开发模式。 在旧的开发模式下遇到了三个问题。")]),t._v(" "),e("ol",[e("li",[t._v("组件之间难以复用状态逻辑。")])]),t._v(" "),e("p",[t._v("过去常见的解决方案是高阶组件、render props 及状态管理框架。 复杂的组件变得难以理解。")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("生命周期函数与业务逻辑耦合太深，导致关联部分难以拆分。")])]),t._v(" "),e("p",[t._v("人和机器都很容易混淆类。常见的有 this 的问题，但在 React 团队中还有类难以优化的问题，希望在编译优化层面做出一些改进。 这三个问题在一定 程度上阻 碍了 React 的后续发 展， 所以 为了 解决 这三 个问题， Hooks 基于函数组件开始设计。")]),t._v(" "),e("p",[t._v("然而第三个问题决定了 Hooks 只支持函数组件。")]),t._v(" "),e("blockquote",[e("p",[t._v("那为什么不要在循环、条件或嵌套函数中调用 Hook 呢？")])]),t._v(" "),e("ul",[e("li",[t._v("主要是为了保证 Hook 调用顺序的一致性")]),t._v(" "),e("li",[t._v("React 内部会维护一个 Hook 链表，每次调用useState时，会按照调用顺序将状态添加到链表中。")]),t._v(" "),e("li",[t._v("如果在"),e("code",[t._v("if")]),t._v("或"),e("code",[t._v("for循环")]),t._v("中使用 Hook，可能会改变 Hook 的调用顺序，导致 React 无法正确地将状态和副作用与对应的组件实例关联起来。")])]),t._v(" "),e("ol",[e("li",[t._v("在if或for循环中使用 Hook 会因为条件或循环次数的不确定性，改变 Hook 的调用顺序，使得 React 无法正确地恢复和更新状态，从而引发错误。")])]),t._v(" "),e("h3",{attrs:{id:"_9-使用-react-router-时-如何获取当前页面的路由或浏览器中地址栏中的地址"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-使用-react-router-时-如何获取当前页面的路由或浏览器中地址栏中的地址"}},[t._v("#")]),t._v(" 9. 使用 React Router 时，如何获取当前页面的路由或浏览器中地址栏中的地址？")]),t._v(" "),e("p",[t._v("在当前组件的 props 中，包含 location 属性对象，包含当前页面路由地址信息，在 match 中存储 当前路由的参数等数据信息。可以直接通过 this .props 使用它们")]),t._v(" "),e("h3",{attrs:{id:"_10-react-children-map-和-js-的-map-有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-react-children-map-和-js-的-map-有什么区别"}},[t._v("#")]),t._v(" 10. React.Children.map 和 js 的 map 有什么区别？")]),t._v(" "),e("p",[t._v("JavaScript 中的 map 不会对为 null 或者 undefined 的数据进行处理，而 React.Children.map 中的 map 可以处理 React.Children 为 null 或者 undefined 的情况。")]),t._v(" "),e("h3",{attrs:{id:"_11-react-router-和-react-router-dom-的有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-react-router-和-react-router-dom-的有什么区别"}},[t._v("#")]),t._v(" 11. react-router 和 react-router-dom 的有什么区别？")]),t._v(" "),e("ol",[e("li",[t._v("api 方面")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("React-router： 提供了路由的核心 api。\n如 Router、Route、Switch 等，但没有提供有关 dom 操 作进行路由跳转的 api；")])]),t._v(" "),e("li",[e("p",[t._v("React-router-dom： 提供了 BrowserRouter、Route、Link 等 api，可以通过 dom 操作触发事\n件控制路由。")])]),t._v(" "),e("li",[e("p",[t._v("Link 组件，会渲染一个 a 标签；BrowserRouter 和 HashRouter 组件，前者使用 pushState 和 popState 事件构建路由，后者使用 hash 和 hashchange 事件构建路由。")])])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("使用区别")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("react-router-dom 在 react-router 的基础上扩展了可操作 dom 的 api。")])]),t._v(" "),e("li",[e("p",[t._v("Swtich 和 Route 都 是从 react-router 中导入了相应的组件并重新导出，没做什么特殊处理。")])]),t._v(" "),e("li",[e("p",[t._v("react-router-dom 中 package.json 依赖中存在对 react-router 的依赖，故此，不需要额外安装 react-router")])])]),t._v(" "),e("h3",{attrs:{id:"_12-react-当调用-setstate-的时候-发生了什么操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-react-当调用-setstate-的时候-发生了什么操作"}},[t._v("#")]),t._v(" 12. React 当调用 setState 的时候，发生了什么操作？")]),t._v(" "),e("p",[t._v("当调 用 setState 时， React 做的第一件事是将传递 给 setState 的对象合并到组件的当前状态 ，这将启动一个称为和解（ reconciliation）的过程。\n和解的最终目标是，根据这个新的状态以最有效的方式更新 DOM。 为此， React 将构建一个新的 React 虚拟 DOM 树（可以将其视为页面 DOM 元素的对象表示方式）。")]),t._v(" "),e("p",[t._v("一旦有了这个DOM 树 ，为了弄清 DOM是如何响应新的状态而改变的， React会将这个新树与 上 一个虚拟 DOM 树比较。 这样做 ， React 会知道 发生的确切 变化，并且通过了解发生的变化后，在绝对必要的情况下进行更新 DOM，即可将因操作 DOM 而占用的空间最小化")]),t._v(" "),e("h3",{attrs:{id:"_13-在-react-中元素-element-和组件-component-有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-在-react-中元素-element-和组件-component-有什么区别"}},[t._v("#")]),t._v(" 13. 在 React 中元素（ element）和组件（ component）有什么区别？")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("在 React 中元素（虛拟 DOM）描述了你在屏幕上看到的 DOM 元素。 换个说法就是，在 React 中元素是页面中 DOM 元素的对象表示方式。在 React 中组件是一个函数 或一个类，它可以接受输入并返回一个元素。")])]),t._v(" "),e("li",[e("p",[t._v("注意：工作中，为了提高开发效率，通常使用 JSX 语法表示 React 元素（虚拟 DOM）。在编译的时 候，把它转化成一个 React. createElement 调用方法")])])]),t._v(" "),e("h3",{attrs:{id:"_14-react-在哪个生命周期中你会发出-ajax-请求-为什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-react-在哪个生命周期中你会发出-ajax-请求-为什么"}},[t._v("#")]),t._v(" 14. React 在哪个生命周期中你会发出 Ajax 请求？为什么？")]),t._v(" "),e("p",[t._v("Ajax 请 求应 该 写在 组 件创 建 期 的第 五 个阶 段 ，即 componentDidMount 生 命周 期 方法 中 。")]),t._v(" "),e("p",[t._v("原因如下。\n在创建期的其他阶段，组件尚未渲染完成。而在存在期的 5 个阶段，又不能确保生命周期方法一定会 执行（如通过 shouldComponentUpdate 方法优化更新等）。在销毀期，组件即将被销毁，请求数 据变得无意义。因此在这些阶段发岀 Ajax 请求显然不是最好的选择。 在组 件尚 未挂 载之前 ，Ajax 请求 将无 法执 行完毕 ，如 果此 时发出 请求 ，将 意味着 在组 件挂 载之前 更 新状态（如执行 setState），这通常是不起作用的。")]),t._v(" "),e("ul",[e("li",[t._v("在 componentDidMount 方法中，执行 Ajax 即可保证组件已经挂载，并且能够正常更新组件")])]),t._v(" "),e("h3",{attrs:{id:"_15-react-shouldcomponentupdate-有什么用-为什么它很重要"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_15-react-shouldcomponentupdate-有什么用-为什么它很重要"}},[t._v("#")]),t._v(" 15.  React shouldComponentUpdate 有什么用？为什么它很重要？")]),t._v(" "),e("p",[t._v("组件状态数据或者属性数据发生更新的时候，组件会进入存在期，视图会渲染更新。")]),t._v(" "),e("p",[t._v("在生命周期方法 shouldComponentUpdate 中，允许选择退出某些组件（和它们的子组件）的和解过程。")]),t._v(" "),e("p",[t._v("和解的最终目标是根据新的状态，以最有效的方式更新用户界面。")]),t._v(" "),e("p",[t._v("如果我们知道用户界面的某一部分 不会改变，那么没有理由让 React 弄清楚它是否应该更新渲染。通过在 shouldComponentUpdate 方法中返回 false, React 将让当前组件及其所有子组件保持与当前组件状态相同")]),t._v(" "),e("h3",{attrs:{id:"_16-react-生命周期调用方法的顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_16-react-生命周期调用方法的顺序"}},[t._v("#")]),t._v(" 16. React 生命周期调用方法的顺序 ？")]),t._v(" "),e("p",[t._v("React 生命周期分为三大周期，11 个阶段，")]),t._v(" "),e("ol",[e("li",[t._v("生命周期方法调用顺序分别如下。\n（1）在创建期的五大阶段，调用方法的顺序如下。")])]),t._v(" "),e("ul",[e("li",[t._v("getDetaultProps：定义默认属性数据。")]),t._v(" "),e("li",[t._v("getInitialState：初始化默认状态数据。")]),t._v(" "),e("li",[t._v("componentWillMount：组件即将被构建。")]),t._v(" "),e("li",[t._v("render：渲染组件。")]),t._v(" "),e("li",[t._v("componentDidMount：组件构建完成")])]),t._v(" "),e("p",[t._v("（2）在存在期的五大阶段，调用方法的顺序如下。")]),t._v(" "),e("ul",[e("li",[t._v("componentWillReceiveProps：组件即将接收新的属性数据。")]),t._v(" "),e("li",[t._v("shouldComponentUpdate：判断组件是否应该更新。")]),t._v(" "),e("li",[t._v("componnent WillUpdate：组件即将更新。")]),t._v(" "),e("li",[t._v("render：渲染组件。 componentDidUpdate：组件更新完成。")])]),t._v(" "),e("p",[t._v("（3）在销毁期的一个阶段，调用方法")]),t._v(" "),e("ul",[e("li",[t._v("componentWillUnmount，表示组件即将被销毀。")])]),t._v(" "),e("h3",{attrs:{id:"_17-react-组件开发中关于作用域的常见问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_17-react-组件开发中关于作用域的常见问题"}},[t._v("#")]),t._v(" 17. React 组件开发中关于作用域的常见问题 ？")]),t._v(" "),e("p",[t._v("在 EMAScript5 语法规范中，关于作用域的常见问题如下。")]),t._v(" "),e("ol",[e("li",[t._v("在 map 等方法的回调函数中，要绑定作用域 this（通过 bind 方法）。")]),t._v(" "),e("li",[t._v("父组件传递给子组件方法的作用域是父组件实例化对象，无法改变。")]),t._v(" "),e("li",[t._v("组件事件回调函数方法的作用域是组件实例化对象（绑定父组件提供的方法就是父组件实例化 对象），无法改变。")])]),t._v(" "),e("p",[t._v("在 EMAScript6 语法规范中，关于作用域的常见问题如下。")]),t._v(" "),e("ol",[e("li",[t._v("当使用箭头函数作为 map 等方法的回调函数时，箭头函数的作用域是当前组件的实例化对象（即 箭头函数的作用域是定义时的作用域），无须绑定作用域。")]),t._v(" "),e("li",[t._v("事件回调函数要绑定组件作用域。")]),t._v(" "),e("li",[t._v("父组件传递方法要绑定父组件作用域。 总之，在 EMAScript6 语法规范中，组件方法的作用域是可以改变的。")])]),t._v(" "),e("h3",{attrs:{id:"_18-react-router-有几种形式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_18-react-router-有几种形式"}},[t._v("#")]),t._v(" 18. React- Router 有几种形式？")]),t._v(" "),e("p",[t._v("解析 有以下几种形式。")]),t._v(" "),e("ol",[e("li",[t._v("HashRouter，通过散列实现，路由要带#。")]),t._v(" "),e("li",[t._v("BrowerRouter，利用 HTML5 中 history API 实现，需要服务器端支持，兼容性不是很好")])]),t._v(" "),e("h3",{attrs:{id:"_19-react-中的-portal-是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_19-react-中的-portal-是什么"}},[t._v("#")]),t._v(" 19. React 中的 Portal 是什么？")]),t._v(" "),e("p",[t._v("Portals 提供了一种很好的将子节点渲染到父组件以外的 DOM 节点的方式。")]),t._v(" "),e("p",[t._v("允许你将组件渲染到 DOM 树中一个不同的位置，而不是它的父组件的 DOM 位置。使用 Portal，你可以在应用的不同层次结构中插入内容，比如在模态框、工具提示（tooltip）、下拉菜单等组件中。")]),t._v(" "),e("ol",[e("li",[t._v("第一个参数（child）是任何可渲染的 React 子元素，例如一个元素，字符串或碎片。")]),t._v(" "),e("li",[t._v("第二个参数（container）则是一个 DOM 元素。")])]),t._v(" "),e("p",[t._v("ReactDOM.createPortal(child, container)")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" React "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" ReactDOM "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react-dom'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("MyPortal")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" children "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ReactDOM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createPortal")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    children"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'portal-root'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 目标DOM节点")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"_20-react-中如何避免不必要的-render"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_20-react-中如何避免不必要的-render"}},[t._v("#")]),t._v(" 20. React 中如何避免不必要的 render？")]),t._v(" "),e("p",[t._v("React 基于虚拟 DOM 和高效 Diff 算法的完美配合，实现了对 DOM 最小粒度的更新。")]),t._v(" "),e("p",[t._v("大多数情况下，React 对 DOM 的渲染效率足以业务日常。\n但在个别复杂业务场景下，性能问题依然会困扰我们。 此时需要采取一些措施来提升运行性能 ， 其很重要的一个方向 ， 就 是 避 免 不 必 要 的 渲 染 （Render）。")]),t._v(" "),e("p",[t._v("这里提下优化的点：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("shouldComponentUpdate")]),t._v(" 和 "),e("code",[t._v("PureComponent")])])]),t._v(" "),e("p",[t._v("在 React 类组 件中，可以利用 "),e("code",[t._v("shouldComponentUpdate")]),t._v(" 或者 PureComponent 来减少因父组件更新而触发子组件的 render，从 而达到目的 。")]),t._v(" "),e("p",[e("code",[t._v("shouldComponentUpdate")]),t._v(" 来决定是否组件是否重新渲染，如果不希望组件重新渲染，返回 false 即可。")]),t._v(" "),e("ul",[e("li",[t._v("利用高阶组件")])]),t._v(" "),e("p",[t._v("在函数组件中， 并没有 "),e("code",[t._v("shouldComponentUpdate")]),t._v(" 这 个生命周期， 可以利用高阶组件 ，封 装一个类似 PureComponet 的功能")]),t._v(" "),e("ul",[e("li",[t._v("使用 React.memo")])]),t._v(" "),e("p",[t._v("React.memo 是 React 16.6 新的一个 API，用来缓存组件的渲染，避免不必要的更新，其实也是一个高阶组件，与 PureComponent 十分类似，但不同的是，\nReact.memo 只能用于函数组件")])])}),[],!1,null,null,null);a.default=r.exports}}]);