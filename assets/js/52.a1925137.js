(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{601:function(_,v,l){"use strict";l.r(v);var p=l(17),i=Object(p.a)({},(function(){var _=this,v=_.$createElement,l=_._self._c||v;return l("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[l("h3",{attrs:{id:"_1-设计模式分别适用于什么场景"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_1-设计模式分别适用于什么场景"}},[_._v("#")]),_._v(" 1. 设计模式分别适用于什么场景？")]),_._v(" "),l("p",[_._v("设计模式有多种类型，以下是一些常见设计模式及其适用场景：")]),_._v(" "),l("ul",[l("li",[l("p",[_._v("单例模式")]),_._v(" "),l("ul",[l("li",[_._v("适用场景：适用于当一个类在整个系统中只需要有一个实例，且该实例需要被广泛访问和共享的场景。")]),_._v(" "),l("li",[_._v("如全局的配置对象、数据库连接池等，确保系统中只有一个实例来管理相关资源，避免资源的重复创建和浪费。")])])]),_._v(" "),l("li",[l("p",[_._v("工厂模式")]),_._v(" "),l("ul",[l("li",[_._v("适用场景：当创建对象的过程较为复杂，或者需要根据不同的条件创建不同类型的对象时，适合使用工厂模式。例如，根据用户选择的不同图形类型，创建相应的图形对象；在开发游戏时，根据不同的游戏场景创建不同类型的角色。")])])]),_._v(" "),l("li",[l("p",[_._v("观察者模式")]),_._v(" "),l("ul",[l("li",[l("p",[_._v("适用场景：常用于实现事件驱动的系统，当一个对象的状态发生变化时，需要通知其他多个对象做出相应的反应。")])]),_._v(" "),l("li",[l("p",[_._v("比如，在社交媒体平台上，当一个用户发布了一条新动态，关注该用户的其他用户会收到通知；")])]),_._v(" "),l("li",[l("p",[_._v("在股票交易系统中，当股票价格发生变化时，相关的投资者会收到提醒。")])])])]),_._v(" "),l("li",[l("p",[_._v("策略模式")]),_._v(" "),l("ul",[l("li",[l("p",[_._v("适用场景：当有多种算法或策略可供选择，且在运行时可以根据不同的情况动态切换算法或策略时，适合使用策略模式。")])]),_._v(" "),l("li",[l("p",[_._v("例如，在电商系统中，根据不同的促销活动，选择不同的折扣计算策略；")])]),_._v(" "),l("li",[l("p",[_._v("在导航应用中，根据用户选择的不同路线规划方式，如最短路径、最快路径等，采用相应的算法来计算路线。")])])])]),_._v(" "),l("li",[l("p",[_._v("装饰器模式")]),_._v(" "),l("ul",[l("li",[l("p",[_._v("适用场景：当需要在不改变现有对象结构的情况下，动态地为对象添加新的功能或行为时，可使用装饰器模式。")])]),_._v(" "),l("li",[l("p",[_._v("比如，给文本添加不同的格式效果，如加粗、斜体、下划线等，可通过装饰器来实现，而无需修改原始的文本对象；")])]),_._v(" "),l("li",[l("p",[_._v("在游戏开发中，为角色添加不同的装备或技能，以增强角色的能力，也可以使用装饰器模式。")])])])])]),_._v(" "),l("h3",{attrs:{id:"_2-app更新与小程序更新之间的数据怎么办"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_2-app更新与小程序更新之间的数据怎么办"}},[_._v("#")]),_._v(" 2. App更新与小程序更新之间的数据怎么办?")]),_._v(" "),l("p",[_._v("以下从不同常见情况分析：")]),_._v(" "),l("ol",[l("li",[_._v("数据存储与同步：")])]),_._v(" "),l("ul",[l("li",[l("p",[_._v("云存储：若数据存储在云端（如服务器数据库），App和小程序都从云端读写数据。")])]),_._v(" "),l("li",[l("p",[_._v("无论哪一方更新，只要云端数据结构和接口未变，数据能保持一致和正常访问。")])]),_._v(" "),l("li",[l("p",[_._v("例如使用阿里云、腾讯云的数据库服务，电商App及其小程序通过接口访问同一商品数据。")])]),_._v(" "),l("li",[l("p",[_._v("本地存储：若数据存于本地，如App的沙盒或小程序的本地缓存。")])]),_._v(" "),l("li",[l("p",[_._v("更新时要考虑数据迁移。")])]),_._v(" "),l("li",[l("p",[_._v("如App更新时，可通过版本号判断，若有数据结构变化，按新结构处理旧数据；")])]),_._v(" "),l("li",[l("p",[_._v("小程序可在更新生命周期函数中检查本地缓存数据版本，进行适配。")])])]),_._v(" "),l("ol",{attrs:{start:"2"}},[l("li",[_._v("数据结构变化：")])]),_._v(" "),l("ul",[l("li",[l("p",[_._v("兼容旧版本：更新时设计数据结构，要尽量兼容旧版本App和小程序。")])]),_._v(" "),l("li",[l("p",[_._v("比如添加新字段，旧版本虽不识别但不影响主体功能。")])]),_._v(" "),l("li",[l("p",[_._v("数据迁移与转换：若数据结构变动大，需在更新时进行迁移和转换。")])]),_._v(" "),l("li",[l("p",[_._v("如旧版以简单文本记录用户信息，新版用结构化JSON存储，更新时要把文本解析转换为JSON格式。")])])]),_._v(" "),l("ol",{attrs:{start:"3"}},[l("li",[_._v("更新通知与用户提示：")])]),_._v(" "),l("ul",[l("li",[_._v("及时告知：在App或小程序更新提示中，告知用户更新对数据的影响。")]),_._v(" "),l("li",[_._v("如提示“本次更新优化数据存储，可能导致部分本地缓存数据需重新加载”。")]),_._v(" "),l("li",[_._v("引导操作：若需用户配合处理数据，如重新登录获取新数据权限，要给出清晰引导步骤。")])])])}),[],!1,null,null,null);v.default=i.exports}}]);